import { PROXY_TREE, VALUE } from 'proxy-state-tree';
const CURRENT_EXIT = Symbol('CURRENT_EXIT');
const INITIAL_STATE = Symbol('INITIAL_STATE');
class StateMachine {
    constructor(definition) {
        this[INITIAL_STATE] = definition.initial;
        this.current = definition.initial;
        Object.keys(definition.states).reduce((aggr, key) => {
            aggr[key] = function (entry, exit) {
                if (definition.states[this.current].includes(key)) {
                    const tree = (this[PROXY_TREE].master.mutationTree || this[PROXY_TREE]);
                    tree.enableMutations();
                    if (this[CURRENT_EXIT])
                        this[CURRENT_EXIT]();
                    this[VALUE][CURRENT_EXIT] = exit;
                    this.current = key;
                    const result = entry && entry();
                    tree.blockMutations();
                    return result;
                }
            };
            return aggr;
        }, this);
    }
    reset() {
        const exit = this[CURRENT_EXIT];
        if (typeof exit === 'function') {
            exit();
            this[VALUE][CURRENT_EXIT] = undefined;
        }
        this.current = this[INITIAL_STATE];
    }
}
export function statemachine(definition) {
    return new StateMachine(definition);
}
//# sourceMappingURL=statemachine.js.map