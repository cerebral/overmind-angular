{"version":3,"file":"statemachine.js","sourceRoot":"","sources":["../src/statemachine.ts"],"names":[],"mappings":";;AAAA,uDAAoD;AAgBpD,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAA;AAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;AAE7C,MAAM,YAAY;IAIhB,YAAY,UAA0C;QACpD,IAAI,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,OAAO,CAAA;QACxC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAA;QAEjC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;YAClD,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,KAAK,EAAE,IAAI;gBAC/B,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAU,CAAC,EAAE;oBACxD,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,6BAAU,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,IAAI,CAAC,6BAAU,CAAC,CAAC,CAAA;oBAEvE,IAAI,CAAC,eAAe,EAAE,CAAA;oBACtB,IAAI,IAAI,CAAC,YAAY,CAAC;wBAAE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAA;oBAC5C,IAAI,CAAC,wBAAK,CAAC,CAAC,YAAY,CAAC,GAAG,IAAI,CAAA;oBAChC,IAAI,CAAC,OAAO,GAAG,GAAU,CAAA;oBACzB,MAAM,MAAM,GAAG,KAAK,IAAI,KAAK,EAAE,CAAA;oBAC/B,IAAI,CAAC,cAAc,EAAE,CAAA;oBAErB,OAAO,MAAM,CAAA;iBACd;YACH,CAAC,CAAA;YAED,OAAO,IAAI,CAAA;QACb,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC;IACD,KAAK;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,CAAA;QAC/B,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;YAC9B,IAAI,EAAE,CAAA;YACN,IAAI,CAAC,wBAAK,CAAC,CAAC,YAAY,CAAC,GAAG,SAAS,CAAA;SACtC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,CAAA;IACpC,CAAC;CACF;AAED,SAAgB,YAAY,CAAwB,UAA0C;IAC5F,OAAO,IAAI,YAAY,CAAC,UAAU,CAAQ,CAAA;AAC5C,CAAC;AAFD,oCAEC","sourcesContent":["import { PROXY_TREE, VALUE } from 'proxy-state-tree'\n\nexport type StatemachineDefinition<States extends string> = {\n  initial: States,\n  states: {\n    [State in States]: Array<States>\n  }\n}\n\nexport type Statemachine<States extends string> = {\n  current: States\n  reset: () => void\n} & {\n  [State in States]: <T extends () => any>(entry?: T, exit?: () => void) => T extends () => infer U ? U : void\n}\n\nconst CURRENT_EXIT = Symbol('CURRENT_EXIT')\nconst INITIAL_STATE = Symbol('INITIAL_STATE')\n\nclass StateMachine<States extends string>  {\n  current: States\n  private [CURRENT_EXIT]: (() => void) | undefined\n  private [INITIAL_STATE]: States\n  constructor(definition: StatemachineDefinition<States>) {\n    this[INITIAL_STATE] = definition.initial\n    this.current = definition.initial\n\n    Object.keys(definition.states).reduce((aggr, key) => {\n      aggr[key] = function (entry, exit) {\n        if (definition.states[this.current].includes(key as any)) {\n          const tree = (this[PROXY_TREE].master.mutationTree || this[PROXY_TREE])\n\n          tree.enableMutations()\n          if (this[CURRENT_EXIT]) this[CURRENT_EXIT]()\n          this[VALUE][CURRENT_EXIT] = exit\n          this.current = key as any\n          const result = entry && entry()\n          tree.blockMutations()\n\n          return result\n        }\n      }\n  \n      return aggr\n    }, this)\n  }\n  reset() {\n    const exit = this[CURRENT_EXIT]\n    if (typeof exit === 'function') {\n      exit()\n      this[VALUE][CURRENT_EXIT] = undefined\n    }\n    this.current = this[INITIAL_STATE]\n  }\n}\n\nexport function statemachine<States extends string>(definition: StatemachineDefinition<States>): Statemachine<States> {\n  return new StateMachine(definition) as any\n}\n"]}