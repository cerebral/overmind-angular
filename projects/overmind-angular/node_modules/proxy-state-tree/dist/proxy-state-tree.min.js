!function(t){var e={};function r(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(i,s,function(e){return t[e]}.bind(null,s));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){var i=Object.prototype.toString;t.exports=function(t){var e;return"[object Object]"===i.call(t)&&(null===(e=Object.getPrototypeOf(t))||e===Object.getPrototypeOf({}))}},function(t,e,r){r.r(e);var i=r(0),s=r.n(i);const n=Symbol("IS_PROXY"),a=Symbol("PATH"),o=Symbol("VALUE"),c=Symbol("PROXY_TREE"),h=new Set(["push","shift","pop","unshift","splice","reverse","sort","copyWithin"]),u=t=>t&&t[n]?t[o]:t,l=t=>"object"==typeof t&&null!==t&&!Array.isArray(t)&&"Object"!==t.constructor.name&&Object.isExtensible(t),f=(t,e,r)=>{switch(t){case"push":return()=>{e.splice(e.indexOf(r[0]),1)};case"shift":{const t=e[0];return()=>{e.unshift(t)}}case"pop":{const t=e.length-1,r=e[t];return()=>{e.splice(t,1,r)}}case"unshift":return()=>{e.splice(e.indexOf(r[0]),1)};case"splice":{const t=e.slice(r[0],r[1]),i=r.slice(2);return()=>e.splice(r[0],r[1]+i.length,...t)}case"reverse":return()=>e.reverse();case"sort":return()=>e.sort((t,e)=>-1*r[0](t,e));case"copyWithin":return()=>e}};class p{constructor(t){this.tree=t,this.CACHED_PROXY=Symbol("CACHED_PROXY"),this.delimiter=t.master.options.delimiter}concat(t,e){return t?t+this.delimiter+e:e}ensureMutationTrackingIsEnabled(t){}isDefaultProxifier(){return this.tree.proxifier===this.tree.master.proxifier}ensureValueDosntExistInStateTreeElsewhere(t){}trackPath(t){if(this.tree.canTrack())if(this.isDefaultProxifier()){const e=this.tree.master.currentTree;if(!e)return;e.addTrackingPath(t)}else this.tree.addTrackingPath(t)}getTrackingTree(){return this.tree.master.currentTree&&this.isDefaultProxifier()?this.tree.master.currentTree:this.tree.canTrack()&&this.tree.canTrack()?this.tree:null}getMutationTree(){return this.tree.master.mutationTree||this.tree}isProxyCached(t,e){return t[this.CACHED_PROXY]&&String(t[this.CACHED_PROXY][a])===String(e)}createArrayProxy(t,e){if(this.isProxyCached(t,e))return t[this.CACHED_PROXY];const r=this,i=new Proxy(t,{get(s,c){if(c===n)return!0;if(c===a)return e;if(c===o)return t;if("indexOf"===c)return(e,r)=>t.indexOf(u(e),u(r));if("length"===c||"function"==typeof s[c]&&!h.has(String(c))||"symbol"==typeof c||s[c]instanceof Date)return s[c];const l=r.getTrackingTree(),p=r.concat(e,c),d=l||r.tree;l&&l.proxifier.trackPath(p),d.trackPathListeners.forEach(t=>t(p));const m=String(c);return h.has(m)?(...t)=>{const n=r.getMutationTree();let a;return a=s[c](...t),n.addMutation({method:m,path:e,delimiter:r.delimiter,args:t,hasChangedValue:!0,revert:f(m,i,t)}),a}:void 0!==s[c]?r.proxify(s[c],p):void 0},set(t,s,n){const a=r.concat(e,s),o=r.getMutationTree(),c=t[s],h=Reflect.set(t,s,n);return o.addMutation({method:"set",path:a,args:[n],delimiter:r.delimiter,hasChangedValue:!0,revert:()=>{void 0===c?delete i[s]:i[s]=c}}),h}});return Object.defineProperty(t,this.CACHED_PROXY,{value:i,configurable:!0}),i}createObjectProxy(t,e){if(this.isProxyCached(t,e))return t[this.CACHED_PROXY];const r=this,i=new Proxy(t,{get(s,h){if(h===n)return!0;if(h===a)return e;if(h===o)return t;if(h===c)return r.tree;if("symbol"==typeof h||h in Object.prototype||s[h]instanceof Date)return s[h];const u=Object.getOwnPropertyDescriptor(s,h)||Object.getOwnPropertyDescriptor(Object.getPrototypeOf(s),h);if(u&&"get"in u){const t=u.get.call(i);return r.tree.master.options.devmode&&r.tree.master.options.onGetter&&r.tree.master.options.onGetter(r.concat(e,h),t),t}const f=r.getTrackingTree(),p=s[h],d=r.concat(e,h),m=f||r.tree;if("function"==typeof p&&l(s))return(...t)=>p.call(i,...t);if("function"==typeof p){if(r.tree.master.options.onFunction){const{func:t,value:e}=r.tree.master.options.onFunction(f||r.tree,d,p);return s[h]=t,e}return p.call(s,r.tree,d)}return m.trackPathListeners.forEach(t=>t(d)),f&&f.proxifier.trackPath(d),void 0!==p?r.proxify(p,d):void 0},set(t,s,n){const a=r.concat(e,s);let o;s in t||(o=e);const c=r.getMutationTree(),h=t[s];if("function"==typeof n&&r.tree.master.options.onFunction){n=r.tree.master.options.onFunction(r.getTrackingTree()||r.tree,a,n).func}const u=n!==t[s],l=Reflect.set(t,s,n);return c.addMutation({method:"set",path:a,args:[n],delimiter:r.delimiter,hasChangedValue:u,revert:()=>{void 0===h?delete i[s]:i[s]=h}},o),l},deleteProperty(t,s){const n=r.concat(e,s);let a;s in t&&(a=e);const o=r.getMutationTree(),c=t[s];return delete t[s],o.addMutation({method:"unset",path:n,args:[],delimiter:r.delimiter,hasChangedValue:!0,revert:()=>{i[s]=c}},a),!0}});return Object.defineProperty(t,this.CACHED_PROXY,{value:i,configurable:!0}),i}proxify(t,e){if(t){if(t[n]&&(String(t[a])!==String(e)||t[o][this.CACHED_PROXY]!==t))return this.proxify(t[o],e);if(t[n])return t;if(Array.isArray(t))return this.createArrayProxy(t,e);if(s()(t)||l(t))return this.createObjectProxy(t,e)}return t}}class d{constructor(t,e){this.mutationCallbacks=[],this.mutations=[],this.objectChanges=new Set,this.isTracking=!1,this.isBlocking=!1,this.trackPathListeners=[],this.isTracking=!0,this.master=t,this.proxifier=e||new p(this),this.state=this.proxifier.proxify(t.sourceState,"")}trackPaths(){const t=new Set,e=e=>{t.add(e)};return this.trackPathListeners.push(e),()=>(this.trackPathListeners.splice(this.trackPathListeners.indexOf(e),1),t)}getMutations(){const t=this.mutations.slice();return this.mutations.length=0,t}getObjectChanges(){const t=new Set([...this.objectChanges]);return this.objectChanges.clear(),t}addMutation(t,e){const r=this.master.currentFlushId;this.mutations.push(t),e&&this.objectChanges.add(e);for(let i of this.master.mutationCallbacks)i(t,new Set(e?[t.path,e]:[t.path]),r);for(let i of this.mutationCallbacks)i(t,new Set(e?[t.path,e]:[t.path]),r)}flush(t=!1){return this.master.flush(this,t)}onMutation(t){this.mutationCallbacks.push(t)}canMutate(){return this.isTracking&&!this.isBlocking}canTrack(){return!1}blockMutations(){this.isBlocking=!0}enableMutations(){this.isBlocking=!1}dispose(){return this.isTracking=!1,this.mutationCallbacks.length=0,this.proxifier=this.master.proxifier,this}}class m{constructor(t){this.pathDependencies=new Set,this.shouldTrack=!1,this.trackPathListeners=[],this.master=t,this.proxifier=t.proxifier,this.state=t.state}trackPaths(){const t=new Set,e=e=>{t.add(e)};return this.trackPathListeners.push(e),()=>(this.trackPathListeners.splice(this.trackPathListeners.indexOf(e),1),t)}canMutate(){return!1}canTrack(){return!0}addTrackingPath(t){this.shouldTrack&&(this.pathDependencies.add(t),this.callback&&this.master.addPathDependency(t,this.callback))}track(t){return this.master.changeTrackStateTree(this),this.shouldTrack=!0,this.clearTracking(),t&&(this.callback=(...e)=>{this.callback&&t(...e)}),this}clearTracking(){if(this.callback)for(let t of this.pathDependencies)this.master.removePathDependency(t,this.callback);this.pathDependencies.clear()}stopTracking(){this.shouldTrack=!1}trackScope(t,e){const r=this.master.previousTree,i=this.master.currentTree;this.master.currentTree=this,this.track(e);const s=t(this);return this.master.currentTree=i,this.master.previousTree=r,this.stopTracking(),s}dispose(){return this.callback?(this.clearTracking(),this.callback=null,this.proxifier=this.master.proxifier,this.master.currentTree===this&&(this.master.currentTree=null),this):(this.pathDependencies.clear(),this)}}r.d(e,"ProxyStateTree",(function(){return g})),r.d(e,"IS_PROXY",(function(){return n})),r.d(e,"PROXY_TREE",(function(){return c})),r.d(e,"VALUE",(function(){return o})),r.d(e,"PATH",(function(){return a})),r.d(e,"TrackStateTree",(function(){return m})),r.d(e,"MutationTree",(function(){return d}));class g{constructor(t,e={}){if(this.cache={mutationTree:[],trackStateTree:[]},this.flushCallbacks=[],this.mutationCallbacks=[],this.currentFlushId=0,this.pathDependencies={},!s()(t))throw new Error("You did not pass a plain object as state to Proxy State Tree");void 0===e.devmode&&(e.devmode=!0),e.delimiter||(e.delimiter="."),this.master=this,this.sourceState=t,this.options=e,this.createTrackStateProxifier()}createTrackStateProxifier(){const t=new m(this);this.proxifier=t.proxifier=new p(t),this.state=t.state=this.proxifier.proxify(this.sourceState,"")}getMutationTree(){if(!this.options.devmode)return this.mutationTree=this.mutationTree||new d(this,this.proxifier);return this.cache.mutationTree.pop()||new d(this)}getTrackStateTree(){return this.cache.trackStateTree.pop()||new m(this)}getTrackStateTreeWithProxifier(){const t=this.getTrackStateTree();return t.proxifier=new p(t),t.state=t.proxifier.proxify(this.sourceState,""),t}changeTrackStateTree(t){this.previousTree=this.currentTree,this.currentTree=t}disposeTree(t){t instanceof d?this.cache.mutationTree.push(t.dispose()):t instanceof m&&this.cache.trackStateTree.push(t.dispose())}onMutation(t){return this.mutationCallbacks.push(t),()=>{this.mutationCallbacks.splice(this.mutationCallbacks.indexOf(t),1)}}forceFlush(){const t=[],e=[];for(let r in this.pathDependencies){this.pathDependencies[r].forEach(r=>{r(t,e,this.currentFlushId++,!1)})}}flush(t,e=!1){let r;if(r=Array.isArray(t)?t.reduce((t,e)=>({mutations:t.mutations.concat(e.getMutations()),objectChanges:new Set([...t.objectChanges,...e.getObjectChanges()])}),{mutations:[],objectChanges:new Set}):{mutations:t.getMutations(),objectChanges:t.getObjectChanges()},!r.mutations.length&&!r.objectChanges.size)return{mutations:[],flushId:null};const i=new Set,s=new Set,n=this.currentFlushId++;for(let t of r.objectChanges)this.pathDependencies[t]&&i.add(t);for(let t of r.mutations)t.hasChangedValue&&i.add(t.path);const a=Array.from(i).sort();for(let t of a)if(this.pathDependencies[t])for(let e of this.pathDependencies[t])s.add(e);for(let t of s)t(r.mutations,a,n,e);const o=this.flushCallbacks.slice();for(let t of o)this.flushCallbacks.includes(t)&&t(r.mutations,a,n,e);return i.clear(),s.clear(),{mutations:r.mutations,flushId:n}}onFlush(t){return this.flushCallbacks.push(t),()=>this.flushCallbacks.splice(this.flushCallbacks.indexOf(t),1)}rescope(t,e){return t&&t[n]?e.proxifier.proxify(t[o],t[a]):t}addPathDependency(t,e){this.pathDependencies[t]||(this.pathDependencies[t]=new Set),this.pathDependencies[t].add(e)}removePathDependency(t,e){this.pathDependencies[t].delete(e),this.pathDependencies[t].size||delete this.pathDependencies[t]}toJSON(){return this.sourceState}}}]);